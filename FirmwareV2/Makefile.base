# Top-level makefile for FirmwareV2


# Get current directory using git because make sucks
CURDIR = $(shell git rev-parse --show-toplevel)/FirmwareV2

include $(CURDIR)/Programmer.base

# Detect OS
OSNAME = NULL
ifeq ($(OS),Windows_NT)
    OSNAME = WINDOWS
else
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
        OSNAME = LINUX
    endif
    ifeq ($(UNAME_S),Darwin)
        OSNAME = OSX
    endif
endif
$(call assert,$(call sne,$(OSNAME),NULL),OS could not be determined)
$(call assert,$(call sne,$(OSNAME),LINUX),Linux currently not supported)

# TODO: Move windows toolchain to this directory
TOOLCHAINDIR = $(CURDIR)/../Firmware/toolchain

# Set up bin and lib directories
ifeq ($(OSNAME),OSX)
    DIRAVR = /usr/local/Cellar/avr-gcc/7.3.0
    DIRAVRUTILS = /usr/local/Cellar/avr-binutils/2.30
endif
ifeq ($(OSNAME),WINDOWS)
    DIRAVR = $(TOOLCHAINDIR)/windows
    DIRAVRUTILS = $(DIRAVR)/utils
endif
DIRAVRBIN = $(DIRAVR)/bin
DIRAVRUTILSBIN = $(DIRAVRUTILS)/bin
AVRINC = $(DIRAVR)/avr/include
AVRLIB = $(DIRAVR)/avr/lib

# Define executables
CXX = $(DIRAVRBIN)/avr-gcc
ifeq ($(OSNAME),OSX)
NM = $(DIRAVRUTILSBIN)/avr-nm
OBJCOPY = $(DIRAVRUTILSBIN)/avr-objcopy
OBJDUMP = $(DIRAVRUTILSBIN)/avr-objdump
SIZE = $(DIRAVRUTILSBIN)/avr-size
AVRDUDE = avrdude
endif
ifeq ($(OSNAME),WINDOWS)
NM = $(DIRAVRBIN)/avr-nm
OBJCOPY = $(DIRAVRBIN)/avr-objcopy
OBJDUMP = $(DIRAVRBIN)/avr-objdump
SIZE = $(DIRAVRBIN)/avr-size
AVRDUDE = avrdude.exe
endif
REMOVE = rm -f
COPY = cp

HEXSIZE = $(SIZE) --target=$(FORMAT) $(TARGET).hex
ELFSIZE = $(SIZE) -A $(TARGET).elf

# Define Messages
MSG_ERRORS_NONE = Errors: none
MSG_BEGIN = -------- begin --------
MSG_END = --------  end  --------
MSG_SIZE_BEFORE = Size before:
MSG_SIZE_AFTER = Size after:
MSG_FLASH = Creating load file for Flash:
MSG_EEPROM = Creating load file for EEPROM:f
MSG_LINKING = Linking:
MSG_COMPILING = Compiling:
MSG_ASSEMBLING = Assembling:
MSG_CLEANING = Cleaning project:

# Set default variables
ifndef MCU
MCU = atmega328p
endif
ifndef AVRDUDE_PROGRAMMER
AVRDUDE_PROGRAMMER = usbasp
endif
ifndef AVRDUDE_MCU
AVRDUDE_MCU = m328
endif
ifndef BAUDRATE
BAUDRATE = 19200
endif
ifndef F_CPU
F_CPU = 16000000
endif
CFLAGS += -DF_CPU=$(F_CPU)

OBJ = $(SRC:.cpp=.o)

TOLINKSRC = $(wildcard $(CURDIR)/Kresge/*.cpp)
TOLINK = $(TOLINKSRC:.cpp=.o)

FORMAT = ihex

ALL_CXXFLAGS 	= -mmcu=$(MCU) -I. -I$(CURDIR)/Kresge/ $(CFLAGS)

# Programming support using avrdude. Settings and variables.
AVRDUDE_WRITE_FLASH = -U flash:w:$(TARGET).hex
AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(TARGET).eep
AVRDUDE_FLAGS = -p $(AVRDUDE_MCU) -c $(AVRDUDE_PROGRAMMER) -P $(AVRDUDE_PORT) # -b $(BAUDRATE)

# Check if makefile vars are set up
ifndef TARGET
$(error TARGET is not set)
endif
ifndef SRC
$(error SRC is not set)
endif



# Default make
all: $(TOOLCHAINDIR)/INSTALLED begin $(TARGET).elf $(TARGET).hex $(TARGET).eep sizeafter finished end

# Keep intermediate object files
.PRECIOUS: %.o

$(TOOLCHAINDIR)/INSTALLED:
ifeq ($(OSNAME),OSX)
	sh $(TOOLCHAINDIR)/install_deps_osx.sh
endif
ifeq ($(OSNAME),WINDOWS)
	@echo "" > $(TOOLCHAINDIR)/INSTALLED # Assume windows toolchain is packaged already
endif

begin:
	@echo
	@echo $(MSG_BEGIN)

finished:
	@echo $(MSG_ERRORS_NONE)

end:
	@echo $(MSG_END)
	@echo

sizebefore:
	@if [ -f $(TARGET).elf ]; then echo; echo $(MSG_SIZE_BEFORE); $(ELFSIZE); echo; fi

sizeafter:
	@if [ -f $(TARGET).elf ]; then echo; echo $(MSG_SIZE_AFTER); $(ELFSIZE); echo; fi

# Program the device.
program: $(TARGET).hex # $(TARGET).eep
	$(AVRDUDE) $(AVRDUDE_FLAGS) $(AVRDUDE_WRITE_FLASH) $(AVRDUDE_WRITE_EEPROM)


# Create final output files (.hex, .eep) from ELF output file.
%.hex: %.elf
	@echo
	@echo $(MSG_FLASH) $@
	$(OBJCOPY) -O $(FORMAT) -R .eeprom $< $@

%.eep: %.elf
	@echo
	@echo $(MSG_EEPROM) $@
	-$(OBJCOPY) -j .eeprom --set-section-flags=.eeprom="alloc,load" \
	--change-section-lma .eeprom=0 -O $(FORMAT) $< $@

# Link: create ELF output file from object files.
.SECONDARY: $(TARGET).elf
.PRECIOUS: $(OBJ)
%.elf: $(OBJ) $(TOLINK)
	@echo
	@echo $(MSG_LINKING) $@
	$(CXX) $(ALL_CXXFLAGS) $(OBJ) $(TOLINK) --output $@


# Compile: create object files from C++ source files
%.o: %.cpp
	@echo
	@echo $(MSG_COMPILING) $<
	$(CXX) -c $(ALL_CXXFLAGS) $< -o $@


# Target: clean project.
clean: begin clean_list finished end

clean_list :
	@echo
	@echo $(MSG_CLEANING)
	$(REMOVE) $(TARGET).hex
	$(REMOVE) $(TARGET).eep
	$(REMOVE) $(TARGET).obj
	$(REMOVE) $(TARGET).cof
	$(REMOVE) $(TARGET).elf
	$(REMOVE) $(TARGET).map
	$(REMOVE) $(TARGET).obj
	$(REMOVE) $(TARGET).a90
	$(REMOVE) $(TARGET).lnk
	$(REMOVE) $(TARGET).lst
	$(REMOVE) $(OBJ)
#	$(REMOVE) $(SRC:.c=.s)
	$(REMOVE) $(SRC:.cpp=.d)
	$(REMOVE) *~


# Automatically generate C++ source code dependencies.
# (Code originally taken from the GNU make user manual and modified
# (See README.txt Credits).)
#
# Note that this will work with sh (bash) and sed that is shipped with WinAVR
# (see the SHELL variable defined above).
# This may not work with other shells or other seds.

%.d: %.cpp
	set -e; $(CXX) -MM $(ALL_CXXFLAGS) $< \
	| sed 's,\(.*\)\.o[ :]*,\1.o \1.d : ,g' > $@; \
	[ -s $@ ] || rm -f $@

-include $(SRC:.cpp=.d)
